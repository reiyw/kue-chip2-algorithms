*** KUE-CHIP2 Assembler ver.1.0   by H.Ochi ***

* Multiplication of Floating-point Numbers ((1+1+3)byte*(1+1+3)byte=(1+1+3)byte)
* Programmed by Ryo Takahashi, April. 26, 2014
* Last modified: May 9, 2014

* Storage for Multiplier (Given)
 80 :           DATA1:  EQU          80H
* Storage for Multiplicand (Given)
 85 :           DATA2:  EQU          85H
* Storage for Partial Product (Work Area)
 90 :           RESULT: EQU          90H
* Storage for Partial Product (Work Area)
 E0 :           WORK:   EQU          E0H
* Storage for Loop Counter (Work Area)
 F0 :           COUNT:  EQU          F0H
* Storage for Product (Answer)
 A0 :           ANS:    EQU          A0H

 00 :   64 81           LD    ACC,   [DATA1+1]       ; 指数部の計算．
 02 :   B4 86           ADD   ACC,   [DATA2+1]       ; 足してから
 04 :   A2 7F           SUB   ACC,   7FH             ; ゲタを引く．
 06 :   74 A1           ST    ACC,   [ANS+1]
 08 :   62 18           LD    ACC,   24              ; 仮数部の計算．
 0A :   74 F0           ST    ACC,   [COUNT]         ; 符号無し4バイトの乗算プログラムを
 0C :   6A 03           LD    IX,    3               ; 3バイト用に書き換えただけ．
 0E :   C0      LP1:    EOR   ACC,   ACC
 0F :   76 DF           ST    ACC,   [IX+WORK-1]
 11 :   76 8F           ST    ACC,   [IX+RESULT-1]
 13 :   76 92           ST    ACC,   [IX+RESULT+3-1]
 15 :   66 86           LD    ACC,   [IX+DATA2+2-1]  ; 仮数部はDATA+2から始まる．
 17 :   76 E2           ST    ACC,   [IX+WORK+3-1]
 19 :   AA 01           SUB   IX,    1
 1B :   31 0E           BNZ          LP1
 1D :   64 84   LP2:    LD    ACC,   [DATA1+2+2]
 1F :   42              SRL   ACC,
 20 :   6A FD           LD    IX,    -3
 22 :   66 85   LP3:    LD    ACC,   [IX+DATA1+2+3]
 24 :   44              RRA   ACC
 25 :   76 85           ST    ACC,   [IX+DATA1+2+3]
 27 :   BA 01           ADD   IX,    1
 29 :   31 22           BNZ          LP3
 2B :   35 3A           BNC          LP5
 2D :   6A 06           LD    IX,    6
 2F :   20              RCF
 30 :   66 8F   LP4:    LD    ACC,   [IX+RESULT-1]
 32 :   96 DF           ADC   ACC,   [IX+WORK-1]
 34 :   76 8F           ST    ACC,   [IX+RESULT-1]
 36 :   AA 01           SUB   IX,    1
 38 :   31 30           BNZ          LP4
 3A :   6A 06   LP5:    LD    IX,    6
 3C :   20              RCF
 3D :   66 DF   LP6:    LD    ACC,   [IX+WORK-1]
 3F :   45              RLA   ACC
 40 :   76 DF           ST    ACC,   [IX+WORK-1]
 42 :   AA 01           SUB   IX,    1
 44 :   31 3D           BNZ          LP6
 46 :   64 F0           LD    ACC,   [COUNT]
 48 :   A2 01           SUB   ACC,   1
 4A :   74 F0           ST    ACC,   [COUNT]
 4C :   31 1D           BNZ          LP2             ; ここまでで仮数部の乗算終わり．
 4E :   64 90           LD    ACC,   [RESULT]        ; 仮数部の乗算結果の最上位ビットが1であれば
 50 :   E2 80           AND   ACC,   80H             ; ANSに格納して指数部を1だけ桁上げする．
 52 :   6A 03           LD    IX,    3               ; 最上位ビットが0であれば1bitだけ左論理シフト
 54 :   31 62           BNZ          LP8             ; すれば正規化ができる．
 56 :   20              RCF
 57 :   66 8F   LP7:    LD    ACC,   [IX+RESULT-1]   ; 仮数部の正規化．
 59 :   45              RLA   ACC
 5A :   76 A1           ST    ACC,   [IX+ANS+2-1]
 5C :   AA 01           SUB   IX,    1
 5E :   31 57           BNZ          LP7
 60 :   30 70           BA           SP1
 62 :   66 8F   LP8:    LD    ACC,   [IX+RESULT-1]
 64 :   76 A1           ST    ACC,   [IX+ANS+2-1]
 66 :   AA 01           SUB   IX,    1
 68 :   31 62           BNZ          LP8
 6A :   64 A1           LD    ACC,   [ANS+1]         ; 指数部の桁上げ．
 6C :   B2 01           ADD   ACC,   1
 6E :   74 A1           ST    ACC,   [ANS+1]
 70 :   64 80   SP1:    LD    ACC,   [DATA1]         ; 符号の処理．
 72 :   C4 85           EOR   ACC,   [DATA2]
 74 :   74 A0           ST    ACC,   [ANS]
 76 :   0F              HLT
                        END
